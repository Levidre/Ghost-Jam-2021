//---------------------------Menus--------------------------
//Zarla : 
//This .dic file is primarily concerned with the double-click menus for each of your ghosts. If you don't want to have menus for your characters, you'd just have to delete the OnMouseDoubleClick functions near the end of mouse.dic and then ignore this file, as none of it will be called I believe. Menus can be cool though, since you can put stuff in them and create new functions if you know what you're doing. For example, I've added a lot of games and interactions and little linked icons to my Hunter Smoker ghost to keep track of their feelings and such. Much of that is pretty complicated though (and kind of messy, cough), so I won't go into it here, but I covered some of the concepts in the coding page of the walkthrough, and enterprising ghost makers can study the menu.dic file I set up for Hunter/Smoker and see how I put it together.
//Anyway, menu.dic also contains the settings for a config menu that will let your user change their name or pronouns if they want, as well as the talk rate of the ghost, all of which are useful things for your ghost to do. So think hard about whether or not you want to skip this file or not.

//The complexity of this file depends on how customized you want your menus. If you just want to leave them as they are, then all you'll have to do is replace dialogue appropriately. You can always add stuff to their menus later if you get the urge. Otherwise, if you have plans in mind, you'll need to study what's going on in here carefully and pay attention to how things are set up! You can do a lot of unique stuff in this file if you're creative.

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!


//--OpenSakuraMenu
//Zarla : 
//This is a bit of intro dialogue before the main character opens their menu. You can see below that there are three pieces of separate dialogue listed before it goes to MenuRun. The character will randomly choose one of those pieces of dialogue before opening the rest of their menu. You can customize this with individual greetings for the character, such as "Yes, %(username)?" or "Need something, %(username)?" or things like that. Note that none of the lines end with \e!
//The \b2 tag tells the ghost to use their big balloon for this dialogue. If your menu has a lot of stuff, this'll probably look better than the small one.

OpenSakuraMenu
{
	
	--
	MenuRun
}

//--MenuRun
//Zarla : As you just saw above. This actually fills out the rest of the menu. If you're going to be adding or changing functions, this is where you'll be doing your edits.

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	//Zarla : These four statements basically get the day of the week, whether it's AM or PM, the hour, and the time. It's putting together the information to display the time at the bottom of the balloon. Pay it no mind.
	--
	"\n\n\_q\b2" //Zarla : The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	"\f(Interactions)\n\n[half]"
	--
	if lastTalk != "" //Zarla : What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat Last Dialogue,OnLastTalk]\n"
	  //Zarla : If the ghost has said something, it will then display this menu option. You can replace "Repeat Last Dialogue" with whatever caption you like, such as "What were you saying?" or "What did you say?" or "Could you repeat that?" or something like that.
	  
	}
	--
 	"\![*]\q[Say something,altalk]\n"	
	//Zarla : 
	//This option will force the ghost to say something from aitalk if the user clicks it. Just replace "Say something" and "Say something 2" with whatever captions you think would be appropriate for such an option. IF you don't want two options for captions, delete one of the lines.
	//Advanced users, you can add multiple captions for any option you add to a menu you make just like this, as long as you separate it from the other options into its own section with two dashes above and below.
	--
	"\![*]\q[Questions,asksthg]\n\n[half]"
	
	--
	"\![*]\q[Actions,actmenu]    \![*]\q[Items,itmenu]\n"
		
	--
	"\n(Features)\n\n[half]"
	--
	"\![*]\q[Todo list,todolist]"
	--
	if displaytest == 1
	{
		"\n[half](Test functions and some useful things)\n\n[half]"
		--
		"\![*]\q[Call the test function,testfunction]\n"
		--
		"\![*]\q[Saori test menu,SaoriTestMenu]\n"
		--
		"\![*]\q[Explain how loops work,loopmenu]\n"
		--
		"\![*]\q[Call the second test function,othertestfunction]\n"
	}
	--
	"\n[half]\![*]\q[Config Menu,configmenu]    /
	\![*]\q[Functions,dosomething]\n\n[half]/
 	\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)"
	--
	"\e"
	--
	SAVEVAR
	//Zarla : These three lead to the Config Menu, the Function menu, and Cancel. You can leave these alone if you like. All the envelopes at the end (see word.dic) basically display the year, month, day, weekday, and time.
}

//Levidre : Would run whatever you want.
Select.testfunction
{
}

GetShells
{
  _shellsnames = IARRAY
  _paths = FENUM("..\..\shell")
  foreach _paths ; _p
  {
    if FOPEN(_filename = "..\..\shell\%(_p)\descript.txt","r")
    {
    while (_line = FREAD(_filename)) != -1;
    {
      if CUTSPACE(_line[0]) == "name"
      { 
        _shellsnames ,= CUTSPACE(_line[1])
        break;
      }
    }
	FCLOSE(_filename)
	}
	
  }
  _shellsnames
}

Select.othertestfunction
{
}


Select.close
{
	"\![leave,passivemode]\e"
}


//Levidre : The menu for the explanations of loops
Select.loopmenu
{
	"%(lsto)* Which loop do you want me to explain ?\n\n[half]\_q"
	--
	"\![*]\q[A foreach one,expforeach]    \![*]\q[A while one,expwhile]"
}

Select.expforeach
{
	//Create the array
	myarray = IARRAY
	myarray[0] = "potatoes,chips"
	myarray[1] = "tomato,ketchup"
	myarray[2] = "bread,pie"
	--
	"\b2%(lsto)* I defined an array, it looks like :\n'' potatoes , chips ''\n'' tomato , ketchup ''\n'' bread , pie ''"
	--
	//Initialize the index to 0
	index = 0
	--
	"\n\n[half]* I start the foreach loop, the index is 0.\n"
	--
	//Initialize what will be displayed to an empty string, a chain of characters
	explainationsdisplayed = ""
	--
	"* There is a little problem with a foreach loop,\w5 if I try to display something during the loops,\w5 it would only display one randomly.\w7 So I stock each loop the dialogue I should have displayed in a big chain of characters I display after the foreach loops.\n\n[half] "
	--
	//The foreach, finally, line becomes each line of myarray one after the other
	foreach myarray ; line
	{	
		--
		//Each loop, the dialogue of what Azura does is added to what would be displayed at the end
		explainationsdisplayed = explainationsdisplayed + "* A loop : for now, line is %(line), the first element of line is %(line[0]) and the index of line in myarray is %(index)\n"
		--
		if index == 0
		{
			explainationsdisplayed = explainationsdisplayed + "* It was the first loop.\n"
		}
		--
		index = index + 1
		--
		if index == ARRAYSIZE(myarray)
		{
			explainationsdisplayed = explainationsdisplayed + "* It was the last loop, index is now equal to the size of myarray."
		}
	}
	--
	//Now, Azura display what she did during the loops
	"%(explainationsdisplayed)\x\e"
}

Select.expwhile
{
	"\b2%(lsto)* A little explanation is a necessity for those.\w7 While loops are very versatile but dangerous too. \w7They are the most dangerous loops that exist because they can be infinite. \w7That means they can run forever without ending, \w5so it could be assimilate to a crash. \w7While loops run while a condition is true and stop when it become false, \w5a condition that never become false will make the loops run forever.\n"
	--
	"* So what looks like this while loops ? \w7Something easy, \w5it looks like if-else statements. \w7It's like if the condition is true, \w5continue the loops. \w7Normally, a if statement runs once, \w5but a while will restart the loop until it leads to an else.\n"
	--
	"* For what using while loops ? Well, \w5what you want, \w5I'm myself using it to read, load or save files.\n\n[half]"
	--
	"\f[italic,true]You have the feeling a good example is in the function under this one or there is a little more complicated one in commu.dic. The function under this one isn't called by anything yet but it does a list of all the ascii code (the alphabet in computer language) used by ssp, it doesn't do anything else and isn't used by anything, but it was fun to do."
	--
	"\nThe one in commu.dic has a real utility, it serves for the interaction with other ghosts. What should do Azura is looking into the saving file of the other ghost to find a certain variable to know if the ghost is speaking or not. It's not finished yet though, it still checks the wrong variable.\f[italic,false]\n\n[half]"
	--
	"* I will do a very simple while loop,\w5 the condition will be a number under ten, \w5when this number would be superior than 10,\w5 the loops will stop and I display the number.\n\n[half]"
	--
	"* So I initialyze the number nb to 0 before starting the loops. \w7Each loop, \w5I increment nb of 1.\n"
	--
	nb = 0
	while nb <= 10
	{
		nb = nb + 1
	}
	--
	"\w8* Done, \w5and now nb is %(nb).\x\e"
	
}

//Zarla : 
//Leave this next bit alone.
//Advanced users, note that this is formatted as Select.linkedfunction? Remember how it went \q[Displayed Name,linkedfunction] above? When a user clicks an option that doesn't begin with On, they'll be linked to Select.linkedfunction. Pay close attention as we go through and you'll see this in action.
Select.altalk
{
	AiTalk
}

//Zarla : Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//Zarla : This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//Zarla : This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{
 			"AM"
 		}
 	else
 		{
 			"PM"
 		}
}

//Zarla : This is figuring out the minute. Leave it alone.
Getnowmin
{
	if minute >= 0 && minute <=9
		{
			"0%(minute)"
		}
	else
		{
			"%(minute)"
		}
}

//Zarla : This is figuring out the hour. Leave it alone.
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
	{
		"0%(hour12)"
	}
	else
	{
		"%(hour12)"
	}
}

//Zarla : If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.

Select.BACKTOMENU
{
	MenuRun
}

//Zarla : If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
{
	TalkConfig
	--
	"\n\n[half]\![*]\q[Go back,BACKTOMENU]     \![*]\q[Nevermind,close]"
}


//*********************Advanced User Info*******************************
//Zarla : 
//Some of you may be wondering why some of these Select.options lead to another function. Why not just put the config menu coding under Select.configmenu, instead of linking to TalkConfig?
//Basically any function that's preceded with Select. is limited in its complexity and can only be called within its own .dic file in my experience. Why should you care, you ask? Well, if you're going to link to this function any other way, such as linking it in other .dic files or as a page in a menu, it needs to be a stand-alone function so it can be properly called. I'm pretty sure.
//The basic jist is this; if you're going to reuse whatever it is the option leads to, you should make it its own function. Otherwise, you can leave it in Select.option. As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option though. Study what stays as a Select.option and what links to another Function as we go through the file.
//***********************************************************************

//--TalkConfig
//Zarla : This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You shouldn't need to touch any of what's under TalkConfig, although you can adjust dialogue in the following functions related to it.

TalkConfig
{
	"\0\b[2]\_q(Settings)\n\n[half]"
	--
	"\![*]\q[Change your name,TEACHNAME] \n        \f[italic,true](currently %(username))\f[italic,false]\n/
	\![*]\q[Change your pronouns,TEACHPRONOUN] \n        \f[italic,true](currently %(heshe)/%(himher)/%(hisher))\f[italic,false]\n/
	\![*]\q[Change your birthday,TEACHBDAY] \n        \f[italic,true](currently %(birthdayprint))\f[italic,false]\n/
	\![*]\q[Change the talk rate,talkinter] \n        \f[italic,true](currently %(talktime))\f[italic,false]\n"
	--

	"\![*]\q[Enable Uninstall,deleteonoff] \n        \f[italic,true](currently %(deleteshitai))\f[italic,false]\n/
	\![*]\q[Reset the relationship,ResetRelation]\n        \f[italic,true](WARNING: cannot be undo)\f[italic,false]\n/
	\![*]\q[Open SSP preferences,sspconfig]\n\n[half]/
	\![*]\q[Enable the tests,enabletest]\n\n[half]/
	\![*]\q[Back to the menu,BACKTOMENU]"
	--
	"\e"
	
}


Select.emailsettings
{
	"\![open,configurationdialog]"
}

//Levidre : This is a debug mode like. It enable the test functions in the menu.
Select.enabletest
{
	if displaytest == 1
	{
		"\0The tests won't show up."
		--
		displaytest = 0
	}
	else
	{
		"\0%(lsto)* The tests will be displayed."
		--
		displaytest = 1
	}
	--
	"\e"
}

//Zarla : This and the next few set up the pronouns, as you can see by the linkedfunction names. You can replace "\0\s[0]What pronouns do you want?" with your own dialogue if you prefer, but leave the rest of it alone.

Select.TEACHPRONOUN
{
	"\0What pronouns do you want?\w5\n\n[half]\_q/
	\![*]\q[He-His-Him,choicemasc]\n/
	\![*]\q[She-Her-Her,choicefem]\n/	
	\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	--
	"I will use he, him and his.\e"
	//Zarla : Leave the part above the double dashes alone. You can replace the snip of dialogue however with whatever you like.
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	--
	"I will use she, her and her.\e"
	//Zarla : as above, you can also replace this dialogue.
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	--
	"I will use they, them and their.\e"
	//Zarla : and this one.
}


//Zarla : These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteonoff
{
	if deleteshitai == "OFF"
	{
		deleteshitai = "ON"
	}
	else
	{
		deleteshitai = "OFF"
	}
	--
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}


//Zarla : This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
{
	dayslot = GetDaySlot //Zarla : This is setting up in case today is the user's birthday.
	
	"\0%(lsto)* What month were you born? \w8Write the number.\![open,inputbox,OnUserBornMonth,-1]\e"
	//Zarla : You can replace the dialogue up to the \![open,inputbox,OnUserBornMonth,-1] tag, leave that alone. You'll need the input box to get the information. Note that the month HAS to be put in in number format as well, so you might want to have your ghost mention that.
}

//--OnUserBornMonth
//Zarla : This takes the value that the user put into the input box above and evaluates it.

OnUserBornMonth
{
	_tempmonth = reference0 //this stores what the user input in as a variable called _tempmonth
	if _tempmonth >= 1 && _tempmonth <= 12 //if the month is a valid month
	{
		bornmonth = _tempmonth
		bornmonthprint = Printmonth
		
		"So you were born in %(bornmonthprint).\n\w8* What day was it?\![open,inputbox,OnUserBornDay,-1]\e"
		
		//Zarla : Here you can see the use of a bornmonthprint envelope to show the user what month they put in. Notice that it opens an inputbox at the end the same way the one above did. You can replace the dialogue up to the input box just as with above.
	}
	else //Zarla : if the month isn't a valid month, like 32 or something.
	{
		"That's not a valid month. Try again.\![open,inputbox,OnUserBornMonth,-1]\e"
		
		//Zarla : You can replace this dialogue as well up to the \! tag, as mentioned. You need to leave the tag for the input box so they can put in a correct month.
	}
}

//Zarla : This puts the name to the number of the month. No need to mess with these.
Printmonth
{
	if bornmonth == 1
	{
		"January"
	}
	elseif bornmonth == 2
	{
		"February"
	}
	elseif bornmonth == 3
	{
		"March"
	}
	elseif bornmonth == 4
	{
		"April"
	}
	elseif bornmonth == 5
	{
		"May"
	}
	elseif bornmonth == 6
	{
		"June"
	}
	elseif bornmonth == 7
	{
		"July"
	}
	elseif bornmonth == 8
	{
		"August"
	}
	elseif bornmonth == 9
	{
		"September"
	}
	elseif bornmonth == 10
	{
		"October"
	}
	elseif bornmonth == 11
	{
		"November"
	}
	else
	{
		"December"
	}
}

//Zarla : This adds an appropriate suffix to the number for the day. No need to mess with this either.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{
	"%(bornday)st"
	}
	elseif bornday == 2 || bornday == 22
	{
	"%(bornday)nd"
	}
	elseif bornday == 3 || bornday == 23
	{
	"%(bornday)rd"
	}
	else
	{
	"%(bornday)th"
	}
}	

//--OnUserBornDay
//Zarla : This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it.

OnUserBornDay
{
	tempday = reference0 //Zarla : storing the input in tempday
	
	if bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12 //This is checking to see if it's one of the months with 31 days.
	{
		if tempday >= 1 && tempday <= 31 //Zarla : if it falls in the right range
		{
			bornday = tempday
			borndayprint = Printday
			userbirthday = "%(bornmonth)month %(bornday)day"
			birthdayprint = "%(bornmonthprint) %(borndayprint)"
					
			"%(birthchecked)"
			//Zarla : Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
		}
		else //Zarla : if the day isn't valid, like the 10046th or something.
		{
			"\0That's not a valid day. Try again.\![open,inputbox,OnUserBornDay,-1]\e"
				
			//Zarla : Similar as you can see to the month check above. You can replace the dialogue here up to the tag as you just did, but make sure to leave the input box tag so the user can put in a correct day.
		}
	}
	elseif bornmonth == 2 //Zarla : if the month is february
	{
		if tempday >= 1 && tempday <= 29 //Zarla : and the day falls in the right range
		{
			bornday = tempday
			borndayprint = Printday
			userbirthday = "%(bornmonth)month %(bornday)day"
			birthdayprint = "%(bornmonthprint) %(borndayprint)"
				
			"%(birthchecked)"
			//Zarla : just as with the above.
		}
		else
		{
			"\0That's not a valid day. Try again.\![open,inputbox,OnUserBornDay,-1]\e"
					
			//Zarla : And the same as above again! You see the pattern here?
		}
	}
	else //Zarla : if it's any other month than those
	{
		if tempday >= 1 && tempday <= 30 //Zarla : if the day falls between these values
		{
			bornday = tempday
			borndayprint = Printday
			userbirthday = "%(bornmonth)month %(bornday)day"
			birthdayprint = "%(bornmonthprint) %(borndayprint)"
					
			"%(birthchecked)"
		}
		else
		{
			"\0That's not a valid day. Try again.\![open,inputbox,OnUserBornDay,-1]\e"
		}
	}		
}

//--birthchecked
//Zarla : This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //Zarla : if today is the user's birthday
	{
		"\0It's your birthday today.\w7 Happy birthday, %(username).\e"
		//Zarla : replace this dialogue with whatever you like
	}
	elseif userbirthday == "12month 25day"
	{
		"\0You were born on Christmas. \w7It's sad to have presents only once per year.\e"
		//Zarla : As you can see, you can set up an elseif statement to check if the user's birthday is any day you want! More on elseif statements in bootend.dic. In this case, there's specialized dialogue if the user was born on Christmas. You can replace this with whatever you like, or change the date you're checking as well, like to one of your character's birthdays if you want. You can also delete this elseif if you don't care.
	}
	else //Zarla : if the birthday is not listed above.
	{
		"\0Your birthday is %(bornmonthprint) %(borndayprint).\w7 I'll remember.\e"
		//Zarla : note the use of envelopes to display the newly set birthday properly. You can replace this dialogue as well, and you can use %(bornmonthprint) and %(borndayprint) to display the month and day in the new dialogue, if you want.
	}
}

//--Talk Rate
//Zarla : This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
{
	"\0\b2How often do you want me to speak?\w7 For now I speak every %(talktime).\n\n[half]/
	//Zarla : note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
	\![*]\q[Every 30 seconds,TALKMAX]\n/
	\![*]\q[Every minute,TALKHIGH]\n/
	\![*]\q[Every 3 minutes,TALKNORMAL]\n/
	\![*]\q[Every 5 minutes,TALKPOOR]\n/
	\![*]\q[Don't speak,TALKNONE]\n/
	\![*]\q[No change,TalksTill]\e"

}

	
//Zarla : If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I would NOT recommend it, it'd just be confusing I'm sure.
Select.TalksTill
{
	"Ok.\e"
}

//Zarla : If the user chooses every 30 seconds.
Select.TALKMAX
{
	talktime = "30 seconds" //Zarla : this sets up the envelope properly
	aitalkinterval = 45 //Zarla : this changes the actual rate
		
		"30 seconds...\w5I will speak a lot!\e"
}

//Zarla : If the user chooses every minute.
Select.TALKHIGH
{
	talktime = "minute"
	aitalkinterval = 90
		
	"\0I will speak every minute.\e"
}

//Zarla : If the user chooses every three minutes.
Select.TALKNORMAL
{
	talktime = "3 minutes"
	aitalkinterval = 270
		
	"\0I will speak every three minutes.\w7 It's a good talk rate for monologuing.\e"
}

//Zarla : If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
{
	talktime = "5 minutes"
	aitalkinterval = 400
	
	"\0I will speak every five minutes.\w5 It's a relaxing talk rate.\e"
}

//Zarla : If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
{
	talktime = "...actually they don't talk at all"
	aitalkinterval = 0

	"\0Huh, \w5rude.\e"
}

	
//Zarla : This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
{
	OnTeachName
}

	
//Zarla : If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
{
	"\0Ok.\e"	
}

	
//Zarla : Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.

Select.dosomething
{
 	"\0\b2Do you want something?\n\n[half]"
	//Zarla : 
	//I mentioned this above in MenuRun, but you can have a set of multiple different responses that may randomly appear when the menu is opened if you offset them from the rest with the -- dashes below this note. Try opening this menu yourself with the template to see how it works. The character will randomly choose one line as the intro. 
	//If you don't want to deal with this, just delete the extra lines and leave one. Otherwise, replace the dialogue above as you like, but note that they don't end with \e here. You can leave the rest of this below alone.
	--
	"\![*]\q[Open calendar,CALENDAR]\n/
	\![*]\q[Check email,MailCheck]\n/
	\![*]\q[Empty recycle bin,ChoiceGarbagecan]\n/
	\![*]\q[Update them,keroupdatecheck]\n"
	--
	"\![*]\q[System information,ChoiceSystemInformation]\n/
	\![*]\q[Update information,AfterUpdate]\n/
	\![*]\q[Your stats,UserDescript]\n\n[half]/
 	\![*]\q[Back to main menu,BACKTOMENU]\e"
}

//Zarla : When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0Here is the calender.\![open,calendar]\e"
	//Zarla : 
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//Zarla : When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0I open the SSP config menu.\![open,configurationdialog]\e"
	
	//Zarla : Again, you can replace up to the \! tag.
}

//Zarla : If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n");	//Zarla : Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. It's just some ghost trivia, basically.
	
	if _gomicheck == 0 //Zarla : If the recycle bin is empty.
	{
		"\0The recycle bin was empty.\e"
		
		//Zarla : This isn't the usual flat template dialogue, mostly because I wanted to show that this is a good place to use s[-1], which I covered in the walkthrough file. You can have your ghost disappear momentarily like they're going to check your recycle bin, then come back. \c clears the ghost's balloon of text. Replace dialogue as you desire.
	}
	elseif _gomicheck >= 1 //Zarla : If the recycle bin is full.
	{
		"\0I'm going to empty the recycle bin.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![embed,OnGarbagecanEmpty]\w9\w9\w9\n\c\s[0]Done.\e"
		//Zarla : 
		//Somewhat similar to the above, but notice the \![embed],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag. Otherwise, replace the dialogue as you want.
		//As you can see, you can have multiple pieces of dialogue in here, just like you can for many other functions scattered through the .dic files. If you only want the one, just delete the others, or if you want to add more, just copy and paste and write new dialogue as it comes to you. This applies to when the recycle bin is empty as well.
	}
}


//Levidre : The call to the SAORI, there is its name and an argument "-f", you can write SAORI instead of FUNCTIONEX and it would work the same.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//Zarla : This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name");
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version");
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name");
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex");
	"/
	\0\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//Zarla : This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
{
	"\![biff]\e"
}


//Zarla : This is when the user ends their headline session. Headlines are detailed more in etc.dic. Replace dialogue with what strikes you.
Select.HEADLINECANCEL
 {
 	"\0Finished with headlines.\e"
}

	
//---- OnChoiceTimeout ---------------------------------------------------------
//Zarla : If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
{
	
}



 
//---- Secondary Character Menu ---------------------------------------------------------
//Zarla : This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

OpenKeroMenu
 {
	
}


//There are no real set things for the second character to do, really. You can mostly add whatever functions you want to them, their menu is totally free reign. In mine for example, Hunter has some games, a pseudo-FAQ for users, a bug report, an update option, and most importantly, a test variable. A lot of that is fairly complicated though, so I won't get into it here. Advanced Users can pick up Hunter and Smoker and study their menu.dic to see how I did it though, and those who read the coding page of the walkthrough and want to make their own functions can feel free to add them here. 
//For the purposes of this simple template, I'll include two options that may come in handy - an update option and a bug report option, as well as the test variable.

//If you click cancel. Replace dialogue as you want.
Select.keroCANCEL
{
	"\1\s[1]This is menu cancel dialogue.\e"
}


//Zarla : This is when they select bug report. This is mostly meant to briefly give the user information about you, the creator, and how to report a problem to you. This can be handy if the person forgot where they got their ghost or how to contact you. Add whatever info you like here.
Select.bugreport
{
"\1\s[1]This is the bug report dialogue. \w5Report bugs to youremailaddress@emailprovider.com. \w5We were downloaded from \_a[http://www.whereveryoupostedthem.com/]some place\_a.\e"
}

//Zarla : When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. You can leave this alone.
Select.keroupdatecheck
{
	"\![updatebymyself]\e"
}

IncreaseAffection
{
	if useraffection >= 300
	{
		useraffection += 1
	}
	elseif useraffection >= 100
	{
		if cumuhour >= 47
		{
			useraffection += 1
		}
	}
	elseif useraffection >= 20
	{
		if cumuhour >= 4
		{
			useraffection += 1
		}
	}
	elseif cumuhour >= 1
	{
		useraffection += 1
	}
}

Select.UserDescript
{
	"\n\n- Your name : %(username)\n- Your birthday : "
	--
	if bornmonthprint == "" || borndayprint == ""
	{
		"unknown"
	}
	else
	{
		"%(bornmonthprint) %(borndayprint)"
	}
	--
	"\n- Pet rates : %(nbpets)\n- Punch rates : %(nbpunched)\n"
	--
	"\n\n[half]\![*]\q[Go back to the menu,BACKTOMENU]"
	--
	"\e"
}

Select.actmenu
{
	"\0(What do you want to do?)\n\n[half]\_q\f[italic,false]"
	--
	if useraffection >= 150
	{
		"\n\![*]\q[Flirt,flirt]"
	}
	--
	if useraffection >= 275
	{
		"     \![*]\q[Kiss,kiss]"
	}
	--
	if useraffection >= 100
	{
		"\n\![Sing,sing]\n"
	}
	else
	{
		"\n"
	}
	--
	"\![*]\q[Insult,insult]\n\n[half]"
	--
	"\![*]\q[Nothing,BACKTOMENU]"
}

Select.itmenu
{
	"\0\f[italic,true]\i[2001]What do you want to give her ?\f[italic,false]\_q\n\n[half]"
	--
	"\![*]\q[A little present,lipresent]\n"
	--
	"\![*]\q[A bigger present,bipresent]\n"
	--
	"\![*]\q[Some food,gifood]\n\n[half]"
	--
	"\![*]\q[Nothing,BACKTOMENU]"
}

Select.asksthg
{
	"\0%(lsta)You want to ask her about...\f[italic,false]\w5\n\n[half]\_q"
	--
	"\![*]\q[About herself,askherself]\n"
	--
	"\![*]\q[Anime,askanime]    \![*]\q[Games,askgame]\n"
	--
	"\![*]\q[Books,askbooks]"
	--
	if useraffection >= 100
	{
		"    \![*]\q[Music,askmusic]\n"
	}
	else
	{
		"\n"
	}
	--
	if nowshell == "Halloween shell"
	{
		"\![*]\q[About the pumpkin,askpumpkin]\n"
	}
	
	--
	"\![*]\q[Her journey in Undertale,askundertale]\n\n[half]"
	--
	"\![*]\q[Nothing,BACKTOMENU]\e"

}


	
//---Fonctions secondaires--------------------------

Select.todolist
{
	suppr = 0
	adddeadline = 0
	"\0%(lsta)Which list ?\f[italic,false]\n\n[half]"
	--
	" \![*]\q[The weekly list,weeklist]\n \![*]\q[The monthly list,monthlist]\n \![*]\q[The whenever list,wheneverlist]\n\n[half]\![*]\q[Go back,BACKTOMENU]    \![*]\q[Nevermind,close]\e"
}


 
//--Test Variable --------------------------------------------------------
//Zarla : 
//I briefly mentioned the test variable in bootend.dic and possibly in etc.dic as well, I'm not sure. What exactly is the test variable? Basically, it's a place you can plug in anything you want to test out. What this means is that you can write some ghost dialogue, then copy and paste it into the test variable dialogue snippet down there, reload your ghost, then choose "test variable" from your second character's menu. Check your dialogue to see if it looks right and if it does, put it back in aitalk, or edit it until it looks right and put it back. While you can use Script Input to test most of your ghost's dialogue, there are some lines it just can't do, and it can't help you test choices. But the test variable can! The dialogue/choices from OnFirstBoot are a prime candidate for testing with this variable.
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well. Advanced Users, the test variable is also great for testing out any new stuff you may add to your ghost, like mode settings, item values, functions, raising or lowering numbers, what have you.

//It is ALWAYS A GOOD IDEA to test your dialogue! If you won't check it with the test variable, at least test it with Script Input! It'll save you so much trouble!

Select.testvariable
{
	//"\1\s[10]Testing!\e"
	
	//"\![enter,passivemode]\0\s[0]Hi, I'm Azura. \w5It's nice to meet you. \w8\0\n\n[half]It's kind of weird for me, it's the firts time I'm in a computer. \w5I don't think that being in Undetale could be considered as being inside a computer. \w5I'm sorry but I must ask you :\x\w4\0\c\s[0]How should I refer to you ?\n\n[half]/
	//	\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
	//	\![*]\q[She/Her/Hers,choicefirstsheher]\n/
	//	\![*]\q[They/Them/Their,choicefirsttheythem]"
	//"\![*]\q[ITEM,itmenu]\n"
	//"\0\s[0]It's VERY early. \w5Are you jogging or something like this ?\n\n[half]\![*]\q[Yes,jogyes]\n\![*]\q[No,jogno]\n\![*]\q[I work,jogwork]\e"
}